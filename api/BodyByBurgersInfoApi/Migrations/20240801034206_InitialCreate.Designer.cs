// <auto-generated />
using System;
using BodyByBurgersInfoApi.BusinessLogic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BodyByBurgersInfoApi.Migrations
{
    [DbContext(typeof(InfoContext))]
    [Migration("20240801034206_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("Ingredient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Icon = "leaf",
                            Name = "Lettuce"
                        },
                        new
                        {
                            Id = 2,
                            Icon = "new-box",
                            Name = "Tomato"
                        },
                        new
                        {
                            Id = 3,
                            Icon = "new-box",
                            Name = "Onion"
                        },
                        new
                        {
                            Id = 4,
                            Icon = "cheese",
                            Name = "Cheese"
                        },
                        new
                        {
                            Id = 5,
                            Icon = "new-box",
                            Name = "Pickles"
                        },
                        new
                        {
                            Id = 6,
                            Icon = "new-box",
                            Name = "Bacon"
                        },
                        new
                        {
                            Id = 7,
                            Icon = "new-box",
                            Name = "Ketchup"
                        },
                        new
                        {
                            Id = 8,
                            Icon = "new-box",
                            Name = "Mustard"
                        },
                        new
                        {
                            Id = 9,
                            Icon = "new-box",
                            Name = "Mayonnaise"
                        },
                        new
                        {
                            Id = 10,
                            Icon = "cow",
                            Name = "Beef Patty"
                        },
                        new
                        {
                            Id = 11,
                            Icon = "chicken",
                            Name = "Chicken Patty"
                        },
                        new
                        {
                            Id = 12,
                            Icon = "leaf",
                            Name = "Veggie Patty"
                        },
                        new
                        {
                            Id = 13,
                            Icon = "egg-fried",
                            Name = "Egg"
                        });
                });

            modelBuilder.Entity("Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("TinyUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("Picture");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TinyUrl = "",
                            Url = "https://www.bodybyburgers.com/wp-content/uploads/2021/06/BBB-Logo-1.png"
                        });
                });

            modelBuilder.Entity("Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeoLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Insta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("ReviewIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewIngredient");
                });

            modelBuilder.Entity("Ingredient", b =>
                {
                    b.HasOne("Review", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("ReviewId");
                });

            modelBuilder.Entity("Picture", b =>
                {
                    b.HasOne("Review", null)
                        .WithMany("Pics")
                        .HasForeignKey("ReviewId");
                });

            modelBuilder.Entity("ReviewIngredient", b =>
                {
                    b.HasOne("Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Review", "Review")
                        .WithMany("ReviewIngredients")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Review", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Pics");

                    b.Navigation("ReviewIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
